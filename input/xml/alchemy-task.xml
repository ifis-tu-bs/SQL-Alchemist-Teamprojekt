<?xml version="1.0" encoding="UTF-8"?>

<tasks schemaversion="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="tasks.xsd">

  <task taskid="Alechmistic_Stuff_1" querylanguage="SQL"><!--querylanguage one of [SQL]-->
    
    <titles>
      <title language="EN">Welcome to SQL Alchemist!</title>
    </titles>
    
    <flufftexts>
      <flufftext language="EN">Welcome to your first task in SQL-Alchemist. It will teach you the basics of this game by presenting several challanges you have to solve using your impressive SQL skills.</flufftext><!--(optional)-->
    </flufftexts>
    
    <schema>
      <relation><!--how would we handle autoincrement ids here?-->
        <intension>CREATE TABLE Powders(id int not null primary key, pname varchar(100), color varchar(50), price int)</intension>
        <extension>
          <tuple>INSERT INTO Powders(id, pname, color) VALUES (1, 'Magic Glitter', 'red')</tuple>
        </extension>
        <metadata>
          <tablename>powders</tablename>
          <primarykey>id</primarykey>
          <datageneration>10;none;max,int,100;random,chemical element,80;random,colour;random,int</datageneration>
        </metadata>
      </relation>
      <relation>
      	<intension>CREATE TABLE Effects(id int not null primary key, ename varchar(100), description varchar(1000))</intension>
      	<extension>
      		<tuple>INSERT INTO Effects(id, ename) VALUES (1, 'Dizzyness')</tuple>
      	</extension>
        <metadata>
          <tablename>effects</tablename>
          <primarykey>id</primarykey>
          <datageneration>10;none;max,int,100;random,effect,80;random,string,200</datageneration>
        </metadata>
      </relation>
      <relation>
      	<intension>CREATE TABLE WIZARDS(name varchar(100)not null, pid int not null, PRIMARY KEY(name, pid), FOREIGN KEY (pid) REFERENCES Powders(id))</intension>
      	<extension>
      		<tuple>INSERT INTO WIZARDS(name, pid) VALUES ('Big Magician', 1)</tuple>
      	</extension>
        <metadata>
          <tablename>wizards</tablename>
          <primarykey>name</primarykey>
          <primarykey>pid</primarykey>
          <datageneration>span0,5;none;random,fullname;ref,powders,id</datageneration>
        </metadata>
      </relation>
      <relation>
      	<intension>CREATE TABLE p2e(pid int not null, eid int not null, strength int, PRIMARY KEY (pid, eid), FOREIGN KEY (pid) REFERENCES Powders(id), FOREIGN KEY (eid) REFERENCES Effects(id))</intension>
      	<extension>
            <tuple>
                 INSERT INTO p2e VALUES (1, 1, 4)
            </tuple>
        </extension>
        <metadata>
          <tablename>p2e</tablename>
          <primarykey>pid</primarykey>
          <primarykey>eid</primarykey>
          <datageneration>5;refAll,powders,id;ref,powders,id;ref,effects,id;max,int,200</datageneration>
        </metadata><!--Can we prevent automatically inserting more tuples for dizzyness? So that it stays unqiue for the red glitter powder?--><!--I wonder how data generation works: Should we provide some hints here? i.e. we need at least 100 powders, and 20 effects, and each powerd should have 0..5 effects each?-->
      </relation>
    </schema>
    
    <subtasks>
      <subtask><!--(1..n)-->
        <tasktexts>
          <tasktext language="EN">Ohhkey...to start simple, just create a result set of with the ID of all "red" powders.</tasktext>
        </tasktexts>
        <solution>
          <referencestatement>
                SELECT * FROM Powders WHERE color='red'
          </referencestatement>
          <evaluationstrategy>SET</evaluationstrategy>
        </solution>
        <points>1</points>
      </subtask>
      <subtask>
        <tasktexts>
          <tasktext language="EN">That was simple. Lets do something more complex. Get me all Powders which have a unique effect, i.e. an effect not shared by any other powder. Please sort that list by the powder's price from most expensive to cheapest.</tasktext>
        </tasktexts>
      	<!--How would we treat stuff like "powders" vs. the id of all powders? -->
      	<solution>
      		<referencestatement>
      			SELECT * FROM Powders p JOIN p2e pe ON pe.pid=p.id WHERE pe.eid IN (SELECT eid FROM p2e GROUP BY eid HAVING count(pid)=1) ORDER BY p.price DESC
      		</referencestatement>
      		 <evaluationstrategy>LIST</evaluationstrategy>
      	</solution>
        <points>2</points>
      	</subtask>
    </subtasks>
    
  </task>
  
</tasks>